#include "../LightCalcCommon.glh"

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - min(cosTheta, 1.0), 5.0);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a = roughness * roughness;
	float a2 = a * a;
	float NdotH = max(dot(N, H), 0.0);
	float NdotH2 = NdotH * NdotH;

	float num = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return num / max(denom, 0.00001);
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = roughness + 1.0;
	float k = (r * r) / 8.0;

	float num = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return num / max(denom, 0.00001);
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);

	float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

vec4 CalcBaseLightPBR(BaseLight baseLight, vec3 direction, vec3 normal, vec3 camPos, vec3 worldPos, vec3 albedo, float metallic, float roughness, float attenuation)
{
	vec3 lightColor = baseLight.color.rgb * baseLight.color.a;

	vec3 N = normalize(normal);
	vec3 V = normalize(camPos - worldPos);

	vec3 F0 = vec3(0.04);
	F0 = mix(F0, albedo, metallic);
	 
	vec3 L = direction;
	vec3 H = normalize(V + L);
	vec3 Radiance = lightColor * attenuation;

	float NDF = DistributionGGX(N, H, roughness);
	float G = GeometrySmith(N, V, L, roughness);
	vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);

	vec3 Ks = F;
	vec3 Kd = vec3(1.0) - Ks;
	Kd *= (1.0 - metallic);

	vec3 Num = NDF * G * F;
	float Denom = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
	vec3 Specular = Num / max(Denom, 0.0001);

	float NdotL = max(dot(N, L), 0.0);
	vec3 Lo = (Kd * albedo / PI + Specular) * Radiance * NdotL;

	return vec4(Lo, 1.0);
}

vec4 CalcDirectionalLightPBR(DirectionalLight directionalLight, vec3 normal, vec3 camPos, vec3 worldPos, vec3 albedo, float metallic, float roughness)
{
	return CalcBaseLightPBR(directionalLight.baseLight, -directionalLight.direction, normal, camPos, worldPos, albedo, metallic, roughness, 1.0);
}

vec4 CalcPointLightPBR(PointLight pointLight, vec3 normal, vec3 camPos, vec3 worldPos, vec3 albedo, float metallic, float roughness)
{
	vec3 direction = pointLight.position - worldPos;
	float distance = length(direction);
	direction = normalize(direction);

	float attenuation = pointLight.attenuation.constant +
						pointLight.attenuation.linear * distance +
						pointLight.attenuation.quadratic * distance * distance;

	attenuation = 1.0 / attenuation;

	vec4 lightColor = CalcBaseLightPBR(pointLight.baseLight, direction, normal, camPos, worldPos, albedo, metallic, roughness, attenuation );

	return lightColor;
}